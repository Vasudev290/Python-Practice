#Python Object orientaed programmimg language(OOPs)
--------  -----------   ---------------   ------------
Major OOP (object-oriented programming) concepts in Python include 
Inheritance, 
Polymorphism, 
Data Abstraction, and 
Encapsulation.

Class, - Class is template, Data Type, Draft and design to create or concetrate object
Object, - How to create object in python ;

Syntex;
-------
class Account:
    pass
    
Account()

#We can create end no of object in class
#Class is template to create or concetrate end no of object
#Once object is create, In memory location allacted in heap memory area

#Function                                                #class
----------                                              --------
def add():                                               class Account:
    pass                                                        pass

add() #We can invoke end no of times                  a1=Account() #once object is create memory location allacted
                                                      a2= Account()
                                                      a3= Account()
#Class Contains Variables and methods
#In python, Everything is a objects.
#With help of a1 we can access the class members.

class Contains methods and Variables
Variables= name:"vasu",age:"23"
methods= behaviour


what is types of Variables?

Class variables are three types :
--------- --------- -----------

                         Org_Name: TCS  => Static variable

            eid:101,                                       eid:102
            ename:'Vasu'  <=== instence Variable  ====>    ename:'Dev' 
            esal:45000                                     esal:55000      


1.instence variables  -> any variable value is varied from object to object 
2.Static variables  -> any variable value is not varied from object to object 
                     #It's created to one copy and share it to all the members.
3.Local variables  -> instence use

what is types of methods ?

Class methods are three types:
---------- ----- ------------
1.instence method
2.class method 
3.static method

constructor;
Required - speacial method to intilize object values, we need constructor, constructor is special method.
constructor method will execute automatically at the time of object createion.
Note: We can't invoke constructor method explicitly 
only once constructor will execute.

how to create constructor

Syntex-
--------
Class Account:
    def __init__(self):
        pass



Overall Methods in variables & methods
--------- ---------- ------- ---------- 

class Account:
    min_Bal = 500                   #Static Varibale
    
    def __init__(self,id,name):     #Constructor
        self.acc_id = id
        self.acc_name = name
    
    def open_Account(self):         #Instence method
        self.min_bal = 200
        
    @classmethod                    #Class method
    def get_Min_Bal(cls):
        pass
    
    @staticmethod                   #Static method
    def cal_interest():
        tax=5                       #Local variable
        
a1= Account(101,'Rahul')
a2= Account(102,'Priya')

print(a1.__dict__)
print(a2.__dict__)


Instence Variable
-------- ---------   When to use ?
If variable value is varied from object to object 


Static Variable
-------  --------
If variable value is not varied from object to object go with static variable.

Local Variable:
-------- -------
Instence use 


Class Methods
--------------
In Python, a class method is a function that receives an instance as its first argument. 
The instance is usually called self, but it can be named anything

types of class methods;
------ -------- ---------

1.constructor
2. instence method
3. class method
3. static method


class Test:
    def __init__(self):   #constructor
        pass
    
    def m1(self):         #instence method
        pass
    
    @classmethod          #class method
    def m2(cls):
        pass
    
    @staticmethod       #static method
    def m3():
        pass


Major OOP (object-oriented programming) concepts in Python include 
Inheritance, 
Polymorphism, 
Data Abstraction, and 
Encapsulation.



Inheritance
------------
Inheritance allows us to define a class that inherits all the methods 
and properties from another class. 
Code reusability. !important
Inheritance one properties from one componanet to another class
Reusing the exisiting class functionlity and adding /extending new features.

types of Inheritance;
------ ----- ---------
Single Inheritance.
Multiple Inheritance.
Multilevel Inheritance.
Hierarchical Inheritance.
Hybrid Inheritance.

Abstraction;
------------
Abstraction is a fundamental concept in Python programming that 
allows us to simplify complex concepts and focus on the essential 
details.
Hiding essential details.
Security

Encapsulation
-------------
Encapsulation is a fundamental object-oriented principle in Python. 
Binding variables + methods as a one Single Encapsulated unit.

Polymorphism;
------------
Polymorphism in Python is the ability to use a single entity to 
represent multiple types in different contexts.
Polymorphism ; poly - many; morphism - forms


object - acting as many forms :account object acting as some times SA object, and current object
operator - acting as many forms : +, *


Inheritance concepts;
---------- ----------
Inheritance properties from one class to another class.
Reusing the exisiting class functionlity and adding /extending new features.

For reusing persuse we using ;
---- ----- ---------- -------
*Function
*class
*Inheritance
this three function we can use to apply code Reusability,

Single Inheritance;
------------------
Parent to child(Parent)

class Parent:
    def m1(self):
        print("Parent class - m1 method")
        
    def m2(self):
        print("Parent class - m2 method")


class child(Parent):
    def m3(self):
        print("Child class - m3 method")
        
        
c1=child()
c1.m1()
c1.m2()
c1.m3()
'''
Parent class - m1 method
Parent class - m2 method
Child class - m3 method
'''


multiple Inheritance
--------------------
Parent1 and Parent2 to child(Parent1,Parent2)

#Mulitple-Inheritence
class Parent1:
    def m1(self):
        print("Parent1 class - m1 Method")

class Parent2:
    def m2(self):
        print("Parent2 class - m2 Method")


class Child(Parent1,Parent2):
    def m3(self):
        print("Child class - m3 Method")


c1=Child()
c1.m1()
c1.m2()
c1.m3()


Multilevel Inheritance
------------------------
GrandParent to Parent to child

#MultiLevel Inheritence 
class GrandParents:
    def m1(self):
        print("GrandParent class - m1 Method")
    
class Parent(GrandParents):
    def m2(self):
        print("Parent class - m2 Method")
    
class child(Parent):
    def m3(self):
        print("Child class - m3 Method")
    
c1=child()
c1.m1()
c1.m2()
c1.m3()

What is Super method ?
The super() function is used to give access to methods and properties 
of a parent or sibling class. 

#Super method
-------------
#To invoke Parent class members in child class.

#syntex
-------
#super().__init__(properties)

class Account:
    def __init__(self,name, email):
        self.acc_name = name          #Instence Variable
        self.acc_email = email        #Instence Variable
    
class SA(Account):
    def __init__(self, id, name, email, amount):
        super().__init__(name, email)
        self.acc_id = id
        self.acc_Bal = amount
        
s1=SA(101,'Vasu', 'vasu@gmail.com', 35000)
        
class CA(Account):
    def __init__(self, id, name, email, amount):
        super().__init__(name, email)
        self.acc_id = id
        self.acc_Bal = amount
        
c1=CA(102,'Deva','deva@gmail.com',40000)


print(s1.__dict__)
print(c1.__dict__)

{'acc_name': 'Vasu', 'acc_email': 'vasu@gmail.com', 'acc_id': 101, 'acc_Bal': 35000}
{'acc_name': 'Deva', 'acc_email': 'deva@gmail.com', 'acc_id': 102, 'acc_Bal': 40000}


Modules
-------

1. abc   *abc, @Abstractmethod
2. json
3. csv
4. math
5. random
6. keyword



#Sample Example of Abstractmethod

#Bank.py
--------
from abc import *         #How to convert abstract class?
class Bank:               #Any class extending ABC class, class constains atleast one abstract- We called as abstract class
    @abstractmethod       #for object classes, we can't create object.
    def cal_bal(self):    #child class - responsible to provide the implementation.
        pass
    
#Account.py
-----------
from bank import Bank
class Account(Bank):
    
    def __init__(self,name,email):             #Constructor
        self.acc_name = name
        self.acc_email = email
        
        
    def open_account(self):
        print("Account opened successfully.!")
                                                     #instence Method
    def cal_bal(self):
        print("Account class - cal_bal method")
        
 
 #Have to use the current Account class functionlity in sa.py and ca.py
         
Account('Vasu','Vasukesavule@gmail.com')
    
#SA.py
---------
from account import Account

class SA(Account):
    pass


#CA.py
------
from account import Account

class CA(Account):
    pass


To Learn for 
--- =--- -
class
how to create object
constructor
need super()
Inheritance
abstractmethod
Polymorphism


Abstraction     : hinding essential details. code Security
                 how to achive abstraction in python? abc Modules - @abstractmethod, ABC class

Encapsulation   : Binding data + method as single unit(Encapsulation unit) 
                 instance methods(setters and getters method)

Inheritance     :Reusing exisiting functionlity and adding new features.

Polymorphism    :many forms
                operators acting as many forms object acting as many forms.